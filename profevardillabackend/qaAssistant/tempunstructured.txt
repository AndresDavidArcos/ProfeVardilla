--------- DOCUMENT 1 ---------
Metadata: {'source': 'D:\\Universidad\\Noveno Semestre\\trabajo de grado\\profevardillabackend\\qaAssistant\\rag_pdf_data\\Clase2-DS1-2022-II-NP_compressed.pdf'}
Desarrollo de Software I

Facultad de Ingeniería Escuela de Ingeniería de Sistemas y Computación

Mauricio Gaona mauricio.gaona@correounivalle.edu.co

Profesor

2022-II

1

Desarrollo de Software I

Agenda

01 Aspectos generales vistos en la

RESUMEN

clase anterior.

02 Requerimientos para el desarrollo

REQUERIMIENTOS

de una aplicación de software.

03 ACTIVIDADES PROXIMA CLASE

2

Desarrollo de Software I

Estado actual de la industria del software

3

Desarrollo de Software I

Conceptos: Crisis del software

Reporte (2020) Caos Report Standish Group (encuesta a nivel mundial a empresas que hacen software)

45% Proyectos que presentaron muchas

dificultades

36% Proyectos exitosos

19% Proyectos que fracasaron

Crisis del software:

Problemas de calidad, Entregas tardías y Sobrecostos

Resumen

4

Desarrollo de Software I

Conceptos

Por qué las estadísticas son tan malas ?



Entendimiento equivocado del desarrollo de software.

Mitos del software. Falsas asunciones.



No distinguir entre hacer un programa de computador y el desarrollo de un producto de software. Los programas de software crecen exponencial mente en complejidad y nivel de dificultad con respecto al tamaño. Los desarrollo sin metodologías no funcionan. Los programadores no son entrenados en los proceso y metodologías de desarrollo de software. Complejidad interna.









Resumen

5

Desarrollo de Software I

Conceptos

¿Qué es software ?

I

Instrucciones (programas de computador) que cuando se ejecutan proveen la funcionalidad y rendimiento requerido.

D

Documentos que describen la operación y uso de los programas.

E

Estructuras de datos que permiten a los programas manipular la información adecuadamente.

Resumen

6

Desarrollo de Software I

Conceptos

Resumen

Lo novedoso

7

Desarrollo de Software I

Conceptos

Resumen

El Modelo de Ciclo de Vida de Desarrollo de software Conjunto de etapas que describen el proceso de desarrollo de software desde su nacimiento hasta su reemplazo o eliminación.

8

Desarrollo de Software I

Resumen

Metodologías

➢ Son una colección de métodos aplicados a lo largo del ciclo de vida de desarrollo de software, coherentes entre sí y que siguen una filosofía o enfoque de desarrollo de software.

➢ Es un marco de trabajo usado para estructurar, planificar y controlar el proceso de desarrollo de un sistema de software.

➢ Ejemplo: Metodologías Tradicionales: RUP, MSF, .... Metodologías Ágiles: SCRUM, XP, Kanban ...

9

Desarrollo de Software I

Conceptos

Metodología ágil Scrum

Resumen

10

Desarrollo de Software I

Preguntas ?

11

Desarrollo de Software I

REQUREMIENTOS DEL SOFTWARE

Un requisito o requerimiento es una declaración que identifica una característica o restricción operativa, funcional o de diseño de un producto o proceso, que es no ambigua, comprobable o medible, y necesaria para la aceptación del producto o proceso.

Los requerimientos especifican lo que desea el cliente y definen las acciones o actividades que debe hacer o cumplir un sistema de software.

12

Desarrollo de Software I

Definir adecuadamente los requerimientos permitirá:

Entender claramente cual es el objetivo

Realizar la estimación de costos de desarrollo

Crear un plan de trabajo

Establecer prioridades

13

Desarrollo de Software I

¿De donde provienen los errores en el Desarrollo de software?

14

Desarrollo de Software I

¿Qué es un requerimiento?

1

2

3

Resuelve una necesidad ●Una condición o necesidad de un usuario para resolver un problema o alcanzar un objetivo.

Satisface condiciones

(cid:0)Capacidad que debe estar presente en un sistema o componentes del sistema para satisfacer un contrato, un estándar, una especificación u otro documento formal.

Define lo que se necesita (cid:0)Definen lo que el sistema debe hacer en cuanto a sus procesos, consultas, reportes, ...

15

Desarrollo de Software I

Clasificación de los requerimientos.

Requerimientos

Requeremientos funcionales

Requerimientos no funcionales

Rendimiento

De calidad

Restricciones

Tecnología

16

Desarrollo de Software I

Clasificación de los requerimientos.

(cid:0)Los requerimientos funcionales

Declaraciones de los servicios que debe proporcionar el sistema, la forma en que el sistema debe reaccionar a las entradas y la forma en que el sistema debe comportarse en situaciones particulares.

(cid:0)Requerimientos no funcionales

Limitaciones en los servicios o funciones ofrecidas por el sistema como de tiempo, limitaciones en el proceso de desarrollo, de rendimiento, de calidad, normas, tecnología, etc

17

Desarrollo de Software I

Requerimientos funcionales.

Los requisitos o requerimientos funcionales son declaraciones de los servicios que prestará el sistema, en la forma en que reaccionará a determinados insumos.

Generalmente, los requerimientos funcionales describen el comportamiento del sistema en condiciones específicas.

En algunos casos, los requisitos funcionales de los sistemas también establecen explícitamente lo que el sistema no debe hacer.

18

Desarrollo de Software I

Requerimientos funcionales.

(cid:0)Los requerimientos.

se suelen especificar en lenguaje natural,

se expresan de forma individual y

se organizan de forma jerárquica (a distintos niveles de detalle),

a menudo, se numeran (para facilitar su gestión)

19

Desarrollo de Software I

Requerimientos funcionales.

(cid:0)Requerimientos en las metodologías tradicionales

20

Desarrollo de Software I

Ejemplos de requerimientos funcionales.

El sistema debe permitir crear un usuario del sistema.

El sistema debe permitir registrar participantes a un evento.

El sistema debe permitir registrar la venta de un artículo.

El sistema debe permitir anular una nota débito.

El sistema debe permitir a los usuarios contratistas poder registrar sus pagos de certificación al sistema de seguridad social junto al valor pagado por cada concepto como son: ARL, Pensión y EPS junto con el número de la planilla que lo soporta.

21

Desarrollo de Software I

Imprecisión en los requerimientos.

22

Desarrollo de Software I

Imprecisión en los requerimientos.

(cid:0)Los problemas surgen cuando los requerimientos no son declarados con precisión.

(cid:0)Requerimientos ambiguos pueden interpretarse de diferentes maneras por los desarrolladores y usuarios.

(cid:0)Deben estar redactados de tal forma que sean comprensibles para usuarios sin conocimientos (cid:0)técnicos avanzados.

23

Desarrollo de Software I

Características de los requerimientos.

Necesario: Lo que pida un requisito debe ser necesario para el producto. Correcto: sí y solo sí, cada requisito especificado es un requisito que el software debe cumplir.

No ambiguo: El texto debe ser claro, preciso y tener una única interpretación posible.

Conciso: Debe redactarse en un lenguaje comprensible por los clientes en lugar de uno de tipo técnico y especializado, aunque aún así debe referenciar los aspectos importantes

Consistente: Ningún requisito debe entrar en conflicto con otro requisito diferente. Asimismo, el lenguaje empleado entre los distintos requisitos debe ser consistente también.

Completo: Los requisitos deben contener en sí mismos toda la información necesaria, y no remitir a otras fuentes externas que los expliquen con más detalle.

Alcanzable: Un requisito debe ser un objetivo realista, posible de ser alcanzado con el dinero, el tiempo y los recursos disponibles. Verificable: Se debe poder verificar con absoluta certeza, si el requisito fue satisfecho o no. Esta verificación puede lograrse mediante inspección, análisis, demostración o testeo.

24

Desarrollo de Software I

Requerimientos no adecuados.

El sistema será lo más fácil de utilizar posible.

El sistema proporcionará una respuesta rápida al usuario.

El sistema se recuperará automáticamente tras producirse un fallo.

25

Desarrollo de Software I

Requerimientos adecuados.

Cuando haya hasta 100 usuarios accediendo simultáneamente al sistema, su tiempo de respuesta no será en ningún momento superior a 5 segundos.

Ante un fallo en el software del sistema, no se tardará más de 10 minutos en restaurar los datos del sistema (en un estado válido) y volver a poner en marcha el sistema.

Condiciones verificables

26

Desarrollo de Software I

Recomendaciones para redactar requerimientos.

Usar un formato estándar y asegurar la adherencia al mismo para todos los requerimientos.

Utilizar el lenguaje de manera consistente.

Resaltar el texto para distinguir las partes clave del requerimiento.

Evite el uso de jerga informática.

27

Desarrollo de Software I

Formato para registrar detalles de un requerimiento.

Nombre del Descripción requerimiento

El sistema debe permitir registrar participantes a un evento

Detalles de los

requerimientos que le sirven al desarrollador para entender con más precisión lo que hay que programar.

Proceso

28

Desarrollo de Software I

Formato para registrar detalles de un requerimiento.

29

Desarrollo de Software I

Ejercicio

Elaborar la descripción de un requerimiento funcional para el proceso de registro de un curso en el sistema de la universidad.

30

Desarrollo de Software I

Proceso para especificar requerimientos

Está relacionado con las actividades para determinar los requerimientos:

Elicitación: Captura, descubrimiento y adquisición de requerimientos. (Identificación de actores y funcionalidades)

Análisis: Detectar y resolver conflictos entre los requerimientos, clasificar los requerimientos

Especificación: Producción del documento de requerimientos

Validación: Validar para asegurar que los requerimientos fueron entendidos y que define lo que el cliente desea

31

Desarrollo de Software I

Proceso para especificar requerimientos

Elicitación

Actividades Obtención Requerimientos

Identificación de actores

Identificación Funcionalidades

Personas

Otro sistema

Dispositivos

Lo que se desea que el sistema haga

32

Desarrollo de Software I

Proceso para especificar requerimientos

Determinación de Requerimientos

Obtención

Documentación

Técnicas

Entrevistas con los usuarios Talleres (Lluvia de ideas) Estudiar sistemas parecidos Encuestas Prototipos BPM

SRS

Especificación del Sistema

Validación

Comprobar las Características de los requerimientos

33

Desarrollo de Software I

Requerimientos no funcionales

Técnicas para obtener requerimientos

Entrevistas

Las entrevistas de los usuarios y las partes interesadas son importantes para crear un software adecuado. Sin conocer las expectativas y el objetivo de las partes interesadas y los usuarios, es muy poco probable que los satisfaga.

La entrevista es un diálogo formal o informal con personas, donde se busca respuesta a un conjunto de preguntas planeadas.



Identificar el propósito de la entrevista : preguntas que permitan entender con claridad cada cosa que el cliente desea



Identificar posibles entrevistados : funcionarios de diferentes niveles

Estudiar el problema planteado

Familiarizarse con el vocabulario del negocio

Tomar apuntes o grabar la reunión.

34

Desarrollo de Software I

Requerimientos no funcionales

Técnicas para obtener requerimientos

Entrevistas con los usuarios:

Recomendaciones: Evitar

Tarea ver video: https://youtu.be/2KZKMY75cJM

35

Desarrollo de Software I

Requerimientos no funcionales

Técnicas para obtener requerimientos

Lluvia de ideas: Reunión donde se proponen ideas para solucionar un problema.

Por lo general, la lluvia de ideas se utiliza para identificar todas las posibles soluciones a los problemas y simplifica el detalle de las oportunidades.

Tener un plan : dividir el problema en partes pequeñas. Ej: hacer diagramas en papel o tableros ayuda a aclarar cosas y capturar colaboración.

Proponer varias alternativas (ir preparado).

Combinar ideas.

Tenga un moderador y limite el tiempo de discusión de cada parte.

Tomar apuntes o grabar la reunión.

36

Desarrollo de Software I

Requerimientos no funcionales

Técnicas para obtener requerimientos

BPM: Business Process Model. BPMN Business Process Model Notation

37

Desarrollo de Software I

Requerimientos no funcionales

Técnicas para obtener requerimientos

Tarea: Próxima clase control de lectura.

1. Ver video: https://youtu.be/2KZKMY75cJM

2. Leer documento: Requirements Gathering Techniques

https://www.linkedin.com/pulse/requirements-gathering-techniques-samgra-malik/

38

Desarrollo de Software I

Requerimientos no funcionales

Técnicas para validación de requerimientos

1. Validación de expertos Personas con experiencia revisan los requerimientos y aprueban o rechazan el requerimiento

2. Prototipado de interfaz de usuario El prototipado de interfaz de usuario es una técnica de representación aproximada de la interfaz de usuario

Los dos tipos principales de prototipos de interfaz de usuario son:

Desechables: se utilizan sólo para la validación de los requisitos y posteriormente se desechan.



Pueden ser prototipos en papel o en software. Evolutivos: una vez utilizados para la validación de los requisitos, se mejora su calidad y se convierten progresivamente en el producto final.

3. Recorrido de BPM: Hacer un BPM que muestre todo el proceso, algoritmo de alto nivel

39

Desarrollo de Software I

Requerimientos no funcionales

Requerimientos no funcionales en las metodologías tradicionales

40

Desarrollo de Software I

Requerimientos no funcionales

Especifican "qué tan bien" y "como" debe comportarse un sistema

Imponen restricciones que típicamente limitan los requerimientos funcionales

También conocidos como "requisitos técnicos", "atributos de calidad "o" requisitos de calidad de servicio "

41

Desarrollo de Software I

Requerimientos no funcionales

Son aquellos requerimientos que no se refieren directamente a las funciones específicas que entrega el sistema, sino a las propiedades emergentes de éste como la fiabilidad, la respuesta en el tiempo y la capacidad de almacenamiento.

De forma alternativa, definen las restricciones del sistema como la capacidad de los dispositivos de entrada/salida y la representación de datos que se utiliza en la interface del sistema.

Factores internos: Los requerimientos no funcionales surgen de la necesidad del usuario, debido a las restricciones en el presupuesto, a las políticas de la organización, a la necesidad de interoperabilidad con otros sistemas de software o hardware.

Factores externos: como los reglamentos de seguridad, las políticas del govierno, entre otros.

42

Desarrollo de Software I

Tipos de requerimientos no funcionales

Eficiencia: ●Toda funcionalidad del sistema y transacción de negocio debe responder al usuario en menos de 5 segundos. ●El sistema debe ser capaz de operar adecuadamente con hasta 100 usuarios con sesiones concurrentes.

Seguridad de lógica y de datos ●Los permisos de acceso al sistema podrán ser cambiados solamente por el administrador del sistema. ●Todas las comunicaciones externas entre servidores de datos, aplicación y cliente del sistema deben estar encriptadas utilizando el algoritmo RSA.

Usabilidad ●El sistema debe contar con manuales de usuario estructurados por cada módulo y funcionalidad. ●El sistema debe contar con un módulo de ayuda en línea.

Tecnología ●El sistema debe ser desarrollado usando el lenguaje Java Versión 8 ●El sistema debe funcionar en el sistema operativo Linux, Windows y MacOS

43

Desarrollo de Software I

Requerimientos funcionales.

(cid:0)Requerimientos en las metodologías ágiles

44

Desarrollo de Software I

Requerimientos en las metodologías ágiles

El Desarrollo ágil de software es un paradigma usado en las metodologías de desarrollo de software

basado en procesos ágiles.

Las metodologías ágiles se concibieron como una alternativa a las prácticas de desarrollo de software tradicional

Es una “sombrilla” para un conjunto de valores, principios y prácticas

El desarrollo ágil es una forma diferente de gestionar equipos y proyectos de desarrollo de Software

Las Historias de Usuario (HU) es el mecanismo usado para obtener las necesidades del usuario.

45

Desarrollo de Software I

Técnicas para obtener requerimientos en las metodologías ágiles

Entrevistas con los usuarios Talleres (Lluvia de ideas) Estudiar sistemas parecidos Encuestas Prototipos BPM

Leer documento sobre técnicas para obtener requerimientos Ver campus virtual https://www.indeed.com/career-advice/career- development/requirement-gathering-techniques

46

Desarrollo de Software I

Requerimientos en las metodologías ágiles

Historias de usuario

Las Historias de Usuario describen las necesidades de algo que es valioso para un usuario de un sistema o software.

Una historia debe permitir conocer la base de las necesidades del usuario, así como los detalles que después permitan fijar la batería de pruebas para poder determinar si un desarrollo es correcto o no.

Las historias de usuario luego se pueden dividir en tareas técnicas para su implementación.

Las historias de usuario son la base para aplicar las metodologías de desarrollo.

47

Desarrollo de Software I

Requerimientos en las metodologías ágiles

Características deseables de las historias de usuario (HU)

49

Desarrollo de Software I

Requerimientos en las metodologías ágiles

Ejemplos de historias de usuario

Como estudiante deseo registrarme en un curso para matricularme en la universidad

Actor

La tarea

Propósito

Plantilla: Como <Actor> deseo <tarea> para <propósito>

50

Desarrollo de Software I

Requerimientos en las metodologías ágiles

Ejemplos de historias de usuario

1. Como Operador deseo poder registrar un producto en el sistema para mantener actualizado el inventario de productos.

2. Como Vendedor, deseo registrar los productos y cantidades que me solicita un cliente para crear un pedido de venta.

51

Desarrollo de Software I

Ejercicio: Elaborar la descripción de una historia de usuario

Plantilla: Como <Actor> deseo <tarea> para <propósito>

Elaborar la descripción de una historia de usuario para crear una factura de venta de un producto a un cliente

Elaborar la descripción de una historia para el proceso de retiro en efectivo en un cajero automático

52

Desarrollo de Software I

Historia de usuario épicas

“Una historia épica es una gran historia de usuario que no se puede entregar como se define en una sola iteración o es lo suficientemente grande como para dividirse en historias de usuario más pequeñas.”

Caraterística principal

Sistema

Componente grande

Tarea 1

Épicas

Tarea 2

Historia de usuario 1

Tarea 3

Historia de usuario 2

Tarea 1

Historia de usuario 3

Tarea 2

Historia de usuario n

Tarea 3

53

Desarrollo de Software I

Descomponer una Historia de usuario en tareas

Tarea 1

Historia de usuario

Tarea 2

Tarea 3

…

Tarea N

¿Para qué dividir una historia de usuario en tareas ?

Puede conducir a estimaciones más precisas. - Puede ayudar para pedir colaboración mas específicas. - Puede ayudar a los desarrolladores senior a ser mentores de los desarrolladores junior. - Se pueden usar como una medida de progreso.

Importante: Solo divida la HU si es necesario, muchos equipos evitan este paso.

54

Desarrollo de Software I

Descomponer una Historia de usuario en tareas

¿Cómo descomponer historia de usuario en tareas?

No hay una formula para hacer esto.

Depende de la HU las tareas a realizar.

Recomendaciones:

Descomponga la HU en tareas técnicas. • No programe tareas muy pequeñas. • • Antes de implementar tareas debes de cero verifique si hay componentes listos que pueda usar.

55

Desarrollo de Software I

Descomponer una Historia de usuario en tareas

Ejemplo: HU003. Como usuario operador deseo poder registrar en el sistema datos de un cliente para crear una cuenta al cliente.

¿Cómo podemos dividir esta HU en tareas?

Dividir la HU en tareas técnicas

Tarea

Descripción de la tarea

1

Diseñar e Implementar formulario para capturar los datos del cliente.

2

Adicionar tablas y/o campos en la BDatos para registrar los datos del formulario.

3

Implementar lógica para leer y validar los campos del formulario.

4

[Implementar mensaje fallo del proceso si ocurre]

5

Implementar el registro de datos del formulario en la BDatos.

6

Implementar mensaje de éxito o fallo del proceso.

7

Ejecutar plan de pruebas (Realizar las pruebas de aceptación definidas).

8

Realizar actividades del DoD.

56

Desarrollo de Software I

Historia de usuario épicas

Como usuario administrador del sistema deseo poder gestionar usuarios para poder administrar los usuarios

Esta épica se puede subdividir en:

Como usuario administrador deseo poder crear un usuario para registralo en el sistema.

Como usuario administrador deseo poder modificar los datos de un usuario para actualizar información de un usuario.

Como usuario administrador deseo poder listar los usuarios registrados en el sistema para conocer el tipo de usuarios se tienen el sistema.

Como usuario administrador deseo inhabilitar (borrar) un usuario para desactivar un usuario del sistema.

57

Desarrollo de Software I

Historia de usuario épicas

Como Vicepresidente de mercadeo y ventas, quiero revisar el desempeño histórico de las ventas, para poder identificar las regiones geográficas y productos de mejor desempeño

Esta épica se puede subdividir en:

Como VP de Mercadeo, deseo seleccionar el período de tiempo en el cual realizaré la revisión de las ventas para poder revisar las ventas de diferentes periodos.

Como VP de Mercadeo, deseo clasificar la información de ventas por región geográfica y productos para tener la información clasificada.

Ejemplos de HU:

http://www.pmoinformatica.com/2015/05/historias-de-usuario-ejemplos.html

58

Desarrollo de Software I

Detalles de una historia de usuario

Historia de Usuario (HU)

1

Código HU:

Sprint:

HU0023

1

Fecha:

Prioridad:

17/02/2022

Alta

Actor(es):

Gerente

Puntos:

3

2

Descripción: Como gerente deseo ver las ventas semanales de mi empresa para conocer como se comportan las ventas día a día.

3 4 5 6

Detalles de la HU:[Colocar aquí toda la información que se requiera para entender la HU: Tareas, Texto (entradas, proceso, salida), fotos videos, audio, BPM, diseño de interfaces de usuario, etc]

Restricciones: 1. Solo los usuarios con privilegios de gerente pueden acceder al reporte. 2. El tiempo de despliegue del reporte no debe exceder 4 segundos

Criterios de aceptación: (Detalle de las HU desde el punto de vista de calidad y se traducen en pruebas) Criterio 1, Criterio 2, …

DoD (Definition of Done): Lista de actividades que se deben cumplir para que la historia esté en donciciones de ser entregado al cliente.

59

Desarrollo de Software I

Detalles de una historia de usuario : Criterios de aceptación

Como usuario deseo poder loguearme en el sistema para poder ingresar al sistema

Item Criterio de aceptación : las condiciones que un producto de software debe satisfacer para

ser aceptado por un usuario, cliente o stakeholder.

1

Un usuario no puede enviar un formulario sin completar todos los campos.

2

El login no puede ser igual al password.

3

El password debe tener al menos 6 caracteres, una letra en mayúscula, un símbolo y un número.

4

Los campos de entrada de datos se deben validar antes de ejecutarlos o guardarlos.

Prueba Login

Password

Resultado esperado

1

Login o password vacíos

2

123456789

123456789

Login o password incorrecto

3

usuario

Secret()22

Login exitoso

4

prueba

SELECT * FROM Users WHERE Username='1' OR '1' = '1' AND Password='1' OR '1' = '1'

Login o password incorrecto

Pruebas de Aceptación

60

Desarrollo de Software I

Detalles de una historia de usuario

DoD (Definition of Done): <<Definición de hecho>>

Cada equipo de desarrollo tiene su propia definición, pero la DoD puede ser una lista de actividades o simplemente una serie de acuerdos que agregan valor verificable y demostrable al producto. Es un entendimiento compartido de lo que significa que una historia de usuario está realmente terminada.

Diseño

Código

DoD

Documentación

Despliegue

Pruebas

Otros

62

Desarrollo de Software I

Detalles de una historia de usuario

DoD (Definition of Done): <<Definición de hecho>>

DoD (Definition of Done): Ejemplo para cada historia de usuario

1. El diseño de la historia fue aprobada (Product owner y equipo de desarrollo) 2. La historia esta terminada a criterio del desarrollador 3. La historia paso las pruebas según los criterios de aceptación en el ambiente de desarrollo.

4. La historia paso las pruebas definidas en el ambiente de pruebas y de preproducción 5. Se realizó la documentación (técnica y manuales de usuario si se requiere) 6. [OK de almenos un integrante del equipo de desarrollo y del Product Owner; se verifica si satisface el requerimiento y si el código sigue es estándar de codificación acordado.]

7. Esta todo preparado para la subirla a producción. 8. La historia esta marcada como terminada en la herramienta de control

63

Desarrollo de Software I

Detalles de una historia de usuario

DoD (Definition of Done): <<Definición de hecho>>

DoD para el Sprint: Ejemplo

1. Se cumple con el DoD de todas las Historias del Sprint. 2. Todas las historias acordadas durante en Sprint Planning están terminadas. 3. Demo verificado en el Review por parte de Product Owner y stakeholders. 4. OK del Product Owner al Sprint.

64

Desarrollo de Software I

Detalles de una historia de usuario

DoD (Definition of Done): <<Definición de hecho>>

DoD para el Proyecto o cada Release: Ejemplo

1. Se cumple con el DoD de cada Sprint del Release o del proyecto. 2. Se cumple con las pruebas definidas para el Release en preproducción (carga, integración, seguridad, etc)

3. Documentación unificada y subida a la herramienta de documentación.

65

Desarrollo de Software I

Historia de usuario

Product BackLog

Lista priorizada y estimada de las hitorias de usuario

HU épica

66

Desarrollo de Software I

Product Backlog

67

Desarrollo de Software I

Requerimientos no funcionales

Requerimientos no funcionales en las metodologías ágiles

68

Desarrollo de Software I

Requerimientos no funcionales en las metodologías ágiles

Imponen restricciones para guiar el trabajo en un proyecto de desarrollo

Una restricción es una condición para los requisitos en línea con las expectativas de calidad

Una restricción establece un límite o algo a cumplir

69

Desarrollo de Software I

Requerimientos no funcionales en las metodologías ágiles (restricciones)

Ejemplo:

HU: Como gerente deseo ver las ventas de mi empresa para saber como se comportan las ventas día a día.

Ventas del 1 al 5 de febrero de 2021

Restricciones: 1. Las ventas se deben desplegar mediante un diagrama de barras 2. El tiempo de despliegue del reporte no debe exceder de 5 segundos

Otros: • El cuadro de búsqueda debe aceptar valores alfanuméricos • El botón Buscar debe aparecer debajo del cuadro de búsqueda • Los resultados de búsqueda deben mostrar solo 15 elementos buscados

por página

El sistema responde a todas las solicitudes de búsqueda dentro de los 5 segundos posteriores a la recepción de la solicitud.

Nota: En muchos casos las restricciones se definen de manera global para el sistema y solo se colocan restricciones en un historia de usuario si es algo muy crítico para el sistema o particular de una historia.

Lunes Martes Miércoles Jueves Viernes

70

Desarrollo de Software I

Validación de historias de usuario

Validación de Historias de usuario

Validación de expertos

Prototipado de interfaz de usuario

Recorrido BPM

Un equipo de expertos revisa la HU, aplica (INVEST) y usa un criterio mayoritario.

Prototipado de interfaz de usuario

•

Desechables Evolutivos

Hacer un BPM que muestre todo el proceso y verificar que no falten HU.

Desarrollo de Software I

Preguntas ?

72

Desarrollo de Software I

Actividades

Leer documento sobre técnicas de recopilación de requerimientos (para el próxima clase)

https://www.indeed.com/career-advice/career-development/requirement-gathering- techniques

73

Desarrollo I

Desarrollo de Software I

Gracias
